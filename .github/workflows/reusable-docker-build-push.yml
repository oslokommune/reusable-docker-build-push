name: Build and push the Docker image

permissions:
  contents: read

on:

  workflow_call:

    secrets:

      AWS_ROLE_ARN:
        description: "The AWS role ARN to assume to authenticate to the AWS Elastic Container Registry"
        required: false
      DOCKER_SECRETS:
        description: "List of secrets to expose to the Docker build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
        required: false

    inputs:

      environment:
        description: >
          The GitHub deployment environment to use. Leave empty to not use a deployment environment.
        type: string

      git_ref:
        description: >
          The branch, tag or SHA to checkout. Default is the commit SHA that triggered the workflow.
        required: false
        type: string

      role_session_name:
        description: >
          The AWS role session name to use. Default is the GitHub repository name.
        required: false
        type: string

      region:
        description: >
          The AWS region to use.
        required: false
        default: "eu-west-1"
        type: string

      context:
        description: >
          Docker context (path) to start build from.
        required: false
        type: string
        default: .

      file:
        description: >
          Dockerfile to build, relative to context path.
        required: false
        default: Dockerfile
        type: string

      platforms:
        description: >
          Platform identifiers to build for.
        required: false
        type: string
        # common ones: linux/amd64,linux/arm64,linux/arm/v7
        default: linux/amd64

      build_args:
        description: >
          List of build-time variables. `IMAGE_CREATED_DATETIME`, `IMAGE_VERSION` and `IMAGE_REVISION` are added automatically.
        required: false
        type: string

      sbom:
        description: "Generate SBOM attestation for the build (shorthand for --attest=type=sbom)"
        required: false
        type: boolean
        default: false

      provenance:
        description: "Generate provenance attestation for the build (shorthand for --attest=type=provenance)"
        required: false
        type: boolean
        default: false

      tag_rules:
        # https://github.com/marketplace/actions/docker-metadata-action#tags-input
        # Priority affects tags order so image version will be set based on the higher one.
        description: >
          Tag rules to use with the docker-metadata action.
        required: false
        type: string
        default: |
          type=sha,format=long,priority=1100
          type=sha,prefix=
          type=raw,value=gha-${{ github.run_id }}
          type=semver,pattern={{version}}

      aws_ecr_login:
        description: Log into AWS Elastic Container Registry (ECR).
        required: false
        default: true
        type: boolean

      aws_ecr_push:
        description: >
          Push the Docker image to one or more registries.
        required: false
        default: false
        type: boolean

      ecr_repository_name:
        description: >
          The ECR repository to push the Docker image to. Default is the GitHub repository name.
        required: false
        type: string

      ghcr_login:
        description: Login to the GitHub Container Registry (GHCR).
        required: false
        default: false
        type: boolean

      ghcr_push:
        description: Push to the GitHub Container Registry (GHCR).
        required: false
        default: false
        type: boolean

      ghcr_image_name:
        description: >
          The name of the GHCR image. This can be used for multiple applications in a monorepo by appending a slash-separated name component. Default is the GitHub repository name.
        required: false
        type: string

      gradle_cache:
        description: |
          Enable or disable the use of a persistent Gradle directory cache.

          Mount the cache into the container using the `--mount` flag with the `RUN` instruction in the Dockerfile. The cache must be in the default location (`/root/.gradle`) and have an ID of `gradle-cache`.
        default: false
        type: boolean

      gradle_build_file_pattern:
        description: >
          Glob pattern to match the Gradle build file.
        type: string
        default: '**/build.gradle'

      maven_cache:
        description: |
          Enable or disable the use of a persistent Maven directory cache.

          Mount the cache into the container using the `--mount` flag with the `RUN` instruction in the Dockerfile. The cache must be in the default location (`/root/.m2`) and have an ID of `maven-cache`.
        default: false
        type: boolean

      maven_build_file_pattern:
        description: >
          Glob pattern to match the Maven build file.
        type: string
        default: '**/pom.xml'

      pip_cache:
        description: |
          Enable or disable the use of a persistent Pip directory cache.

          Mount the cache into the container using the `--mount` flag with the `RUN` instruction in the Dockerfile. The cache must be in the default location (`/root/.cache/pip`) and have an ID of `pip-cache`.
        default: false
        type: boolean

      pip_requirements_file_pattern:
        description: >
          Glob pattern to match the Pip requirements file.
        type: string
        default: '**/requirements.txt'

    outputs:

      image_version:
        description: >
          The image version. Use this to find the image in the ECR repository.
        value: ${{ jobs.build_push.outputs.image_version }}

      image_tags:
        description: >
          The tags that were applied to the image.
        value: ${{ jobs.build_push.outputs.image_tags }}

      image_id:
        description: >
          The image ID. This is the hash of the local image JSON configuration.
        value: ${{ jobs.build_push.outputs.image_id }}

      image_digest:
        description: >
          The image digest. This is the hash of the Docker manifest.
        value: ${{ jobs.build_push.outputs.image_digest }}

      docker_build_metadata:
        description: >
          The Docker build metadata.
        value: ${{ jobs.build_push.outputs.docker_build_metadata }}

jobs:

  build_push:

    name: Build and push the Docker image

    runs-on: ubuntu-latest

    permissions:
      id-token: write # For the GitHub's OIDC Token endpoint
      contents: read
      packages: write

    environment: "${{ inputs.environment }}"

    outputs:
      image_version: ${{ steps.docker-meta.outputs.version }}
      image_tags: ${{ steps.docker-meta.outputs.tags }}
      image_id: ${{ steps.build-push.outputs.imageid }}
      image_digest: ${{ steps.build-push.outputs.digest }}
      docker_build_metadata: ${{ steps.build-push.outputs.metadata }}

    steps:

      - name: Checkout ‚öôÔ∏è
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          ref: ${{ inputs.git_ref || github.sha }}


      - if: inputs.aws_ecr_login
        name: Configure AWS credentials using the OpenID Connect (OIDC) provider üîë
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ${{ inputs.region }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: ${{ inputs.role_session_name || github.event.repository.name }}


      - if: inputs.aws_ecr_login
        name: Login to Elastic Container Registry (ECR) üîë
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: "true"


      - if: inputs.aws_ecr_push
        name: Set ECR registry ‚öô
        run: echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}/${{ inputs.ecr_repository_name || github.event.repository.name }}" >> "$GITHUB_ENV"


      - if: inputs.ghcr_login
        name: Login to GitHub Container Registry (GHCR) üîë
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - if: inputs.ghcr_push
        name: Set GHCR registry ‚öô
        run: echo "GHCR_REGISTRY=ghcr.io/${{ inputs.ghcr_image_name || github.repository }}" >> "$GITHUB_ENV"


      - name: Extract metadata (tags, labels) from Git reference and GitHub events ‚öôÔ∏è
        id: docker-meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            ${{ env.ECR_REGISTRY }}
            ${{ env.GHCR_REGISTRY }}

          tags: ${{ inputs.tag_rules }}


      - if: ${{ inputs.platforms != 'linux/amd64' }}
        name: Set up QEMU (Quick EMUlator) for multi-platform images ‚öôÔ∏è
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0


      - name: Set up Docker Buildx ‚öôÔ∏è
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0


      - if: ${{ inputs.maven_cache }}
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        name: Handle cache for Maven ‚öô
        id: cache-maven
        with:
          key: cache-maven-${{ hashFiles(inputs.maven_build_file_pattern) }}
          path: |
            root-m2
          restore-keys: |
            cache-maven-


      - if: ${{ inputs.maven_cache }}
        name: Inject Maven cache into Docker ‚öô
        uses: reproducible-containers/buildkit-cache-dance@87e6a3bbd976a1476e29b60fe743ab0977034ff5 # v3.1.1
        with:
          cache-map: |
            {
              "root-m2": {
                "target": "/root/.m2",
                "id": "maven-cache"
              }
            }
          save-always: "false"
          skip-extraction: ${{ steps.cache-maven.outputs.cache-hit }}


      - if: ${{ inputs.gradle_cache }}
        name: Handle cache for Gradle ‚öô
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: cache-gradle
        with:
          key: cache-gradle-${{ hashFiles(inputs.gradle_build_file_pattern) }}
          path: |
            root-gradle
          restore-keys: |
            cache-gradle-


      - if: ${{ inputs.gradle_cache }}
        name: Inject Gradle cache into Docker ‚öô
        uses: reproducible-containers/buildkit-cache-dance@87e6a3bbd976a1476e29b60fe743ab0977034ff5 # v3.1.1
        with:
          cache-map: |
            {
              "root-gradle": {
                "target": "/root/.gradle",
                "id": "gradle-cache"
              }
            }
          save-always: "false"
          skip-extraction: ${{ steps.cache-gradle.outputs.cache-hit }}


      - if: ${{ inputs.pip_cache }}
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        name: Handle cache for Pip ‚öô
        id: cache-pip
        with:
          key: cache-pip-${{ hashFiles(inputs.pip_requirements_file_pattern) }}
          path: |
            root-cache-pip
          restore-keys: |
            cache-pip-


      - if: ${{ inputs.pip_cache }}
        name: Inject Pip cache into Docker ‚öô
        uses: reproducible-containers/buildkit-cache-dance@87e6a3bbd976a1476e29b60fe743ab0977034ff5 # v3.1.1
        with:
          cache-map: |
            {
              "root-cache-pip": {
                "target": "/root/.cache/pip",
                "id": "pip-cache"
              }
            }
          save-always: "false"
          skip-extraction: ${{ steps.cache-pip.outputs.cache-hit }}


      - name: Build and push (if enabled) Docker image to one or more registries üöÄ
        id: build-push
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          platforms: ${{ inputs.platforms }}
          provenance: ${{ inputs.provenance }}
          sbom: ${{ inputs.sbom }}
          build-args: |
            ECR_REPOSITORY_NAME=${{ inputs.ecr_repository_name }}
            GHCR_IMAGE_NAME=${{ inputs.ghcr_image_name || github.repository }}
            IMAGE_CREATED_DATETIME=${{ fromJSON(steps.docker-meta.outputs.json).labels['org.opencontainers.image.created'] }}
            IMAGE_VERSION=${{ fromJSON(steps.docker-meta.outputs.json).labels['org.opencontainers.image.version'] }}
            IMAGE_REVISION=${{ fromJSON(steps.docker-meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            GITHUB_REPOSITORY=${{ github.repository }}
            GIT_COMMIT_SHA=${{ github.sha }}
            GIT_BEFORE_SHA=${{ github.event.before }}
            GIT_AFTER_SHA=${{ github.event.after }}
            WORKFLOW_RUN_ID=${{ github.run_id }}
            ${{ inputs.build_args }}
          secrets: ${{ secrets.DOCKER_SECRETS }}

          # https://docs.docker.com/build/ci/github-actions/examples/#cache
          cache-from: type=gha
          cache-to: type=gha,mode=max

          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

          load: false
          push: ${{ inputs.aws_ecr_push || inputs.ghcr_push }}


      - name: Write job summary üìù
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          Image version (use this to find the image in the repository):

          \`\`\`text
          ${{ steps.docker-meta.outputs.version }}
          \`\`\`

          Image ID (hash of the local image JSON configuration):

          \`\`\`text
          ${{ steps.build-push.outputs.imageid }}
          \`\`\`

          Image digest (hash of the Docker manifest):

          \`\`\`text
          ${{ steps.build-push.outputs.digest }}
          \`\`\`

          Image tags:

          \`\`\`text
          ${{ steps.docker-meta.outputs.tags }}
          \`\`\`

          Image labels:

          \`\`\`text
          ${{ steps.docker-meta.outputs.labels }}
          \`\`\`

          Docker build metadata:

          \`\`\`json
          ${{ steps.build-push.outputs.metadata }}
          \`\`\`
          EOF
